Важное свойство А. я. - возможность регуляризации структуры программы, облегчающей ее написание, изучение і проверку правильности. Основными средствами регуляризации являются ограничения на структуру областей действия, тел процедур и циклов, а также регламентация употребления операторов передачи управления, ограничивающая ветвимость цепочек выполнения базовых операторов параллельно-последовательной структурой.

Программирование с псспользованием А. я. для выqислительной машины требует включения в ее программное обеспечение специальных п р о г р а м м и р у ющ и $\mathrm{x}$ п $\mathrm{p}$ о ц е с с о $\mathrm{p}$ о в - посредников между программами на А. я. и машиной. Процессор в своем развернутом составе выполняет следующие функции: ввод программы, лекспческий (выделение и классификация лексем), синтаксический и семантич. анализы с сигнализацией о формальных ошибках, синтез промежуточной формы (представление программы на внутреннем языке нек-рой абсстрактной вычислительной машины, удобное для последующей обработки или выполнения программы), оптимизация (систематич. преобразование промежуточной формы, улучшающее такие характеристикі программы, как ее размер, скорость и объем расходуемой памяти), генерация (построение машинной программы), выполнение программы. В процессорах транслирующего типа (т р а н с л я т о р ы, ком пи ля торы, програ м и р у щи п р о г р а м м ы) выполнение программыпроисходит после полного построения машинной программы. В процессорах интеріретирующего типа (ш а го в ы е, д и алоговы е, о т ладо чны е т р а н с ля т о р ы) программа выполняется с помощью нек-рого механизма интерпретации ее либо промежуточной формы, либо дерева разбора, либо даже исходного текста.

Различают одно-, двух- и многофазные с х е м ы т р а н с л я ц и и программ. В однофазной схеме все функции транслятора объединены в один просмотр текста программы. Оптимизация и промежуточная форма отсутствуют, а выделяемые вершины дерева разбора тут же порождают машинные команды программы. В двухфазных трансляторах обычно на первом просмотре программы строится дерево разбора, а на втором просмотре семантич. анализ объединяется с генерацией. Многофазные схемы с использованием промежуточной формы применяіотя в оптимизирующих трансляторах или в системах со сменной генерацией для различных типов машин, а для нек-рых А. я. требуются в силу сложности синтаксіч. и семантич. анализов.

Количество разнообразных А. я., созданных для работы на вычислительных машинах, весьма велико (больше тысячи), однако только нек-рые из них получили широкое расіространение. $К$ ним относятся языки алгол, алгол-68, кобол, лисп, ПЛ/1, силула, бортран, а в СССР такке алгамс, альба, рефал.

Лит.: [1] И и г е р м а н П., Синтаксически ориентированный транслятор, пер. с англ., М., 1969; [2] Языки программирования, пер. с англ., М., 1972; [3] Х о п г у д Ф., Методы компиляции, пер. с англ., М., 1972; тельное изучение языков программирования, пер. с англ., М.,
1974.
А. П. Ершов.

АЛГОРИТМОВ СочЕТАНИЯ - название, установившееся за рядом конкретных способов конструирования новых алгоритмов из нескольких заданных.

В применении к норлальныл алгориблам наибольшую известность получили следующие А. с.: н о р м а л ь-

![](https://cdn.mathpix.com/cropped/2023_07_08_cffd143f92b9c802e1dag-1.jpg?height=37&width=826&top_left_y=2105&top_left_x=143)
алгорифмов $\mathfrak{U}$ и $\mathfrak{B}$, н о р м а ль н о е о б ъ е д и н е ни е $(\mathfrak{H} \sim \mathfrak{B})$ двух нормальных алгорифмов $\mathfrak{U}$ и $\mathfrak{B}$,

![](https://cdn.mathpix.com/cropped/2023_07_08_cffd143f92b9c802e1dag-1.jpg?height=40&width=829&top_left_y=2193&top_left_x=141)
двух нормальных алгорифмов $\mathfrak{U}$ и $\mathfrak{B}$, управляемое нормальным алгорифмом (5, н о р м а л ь н о е по вт о р е н и е $(\mathfrak{H} \bigcirc(5)$ нормального алгорифма $\mathfrak{A}$, уп- равляемое нормальным алгорифмом (5. Если $\mathfrak{A}, \mathfrak{R}$, (5) - нормальные алгорифмы в нек-ром алфавите $A$, то упомянутые их сочетания являются нормальными алгорифмами в нек-ром фиксированном расширении $A$ и удовлетворяют следующим условиям: а) для любого слова $\boldsymbol{P} \quad$ в $\boldsymbol{A}$ имеет место $(\mathfrak{B} \circ \mathfrak{X})\llcorner P\rfloor \simeq \mathscr{B}\llcorner\mathfrak{A}\llcorner P \downarrow\rfloor$ (т е о р е м а к о м по о и ци и); б) для любого слова $P$ в $A$ имеет место $(\mathfrak{H}-\mathfrak{B})\llcorner P\lrcorner \simeq \mathfrak{Y}\llcorner P\lrcorner \mathfrak{B}\llcorner P \perp \quad$ т е оре ма об ь е д и не ни я); в) для любого слова $P$ в $A$

![](https://cdn.mathpix.com/cropped/2023_07_08_cffd143f92b9c802e1dag-1.jpg?height=94&width=692&top_left_y=454&top_left_x=1073)

![](https://cdn.mathpix.com/cropped/2023_07_08_cffd143f92b9c802e1dag-1.jpg?height=44&width=814&top_left_y=541&top_left_x=1007)

![](https://cdn.mathpix.com/cropped/2023_07_08_cffd143f92b9c802e1dag-1.jpg?height=47&width=818&top_left_y=576&top_left_x=1005)
любых слов $P$ и $Q$ в $A$ графическое равенство $(\mathfrak{H} \bigcirc(\tilde{\sigma})\llcorner P \perp$ 으 $Q$ имеет место тогда и только тогда, когда может быть указан ряд слов $P_{0}, P_{1}, \ldots, P_{k}(k \geqslant 1)$ в алфавите $A$ таких, что

\[
\begin{gathered}
P_{0} \text { 으 } P, \\
P_{k} \text { 으 } Q, \\
P_{i} \text { 으 } \mathfrak{H} L P_{i-1} \downarrow(i=1, \ldots, k), \\
\left(5 \left\llcornerP_{k} \downarrow \Phi \Lambda \quad(i=1, \ldots, k-1),\right.\right. \\
\left(5\left\llcorner P_{k}\right\rfloor \text { 흐 } \Lambda\right.
\end{gathered}
\]

(т е о р е м а п о в т о р е н и я). Аналогичные теоремы могут быть получены и для Тьюринга машин. В теории рекурсивных бункций наибольшее употребление нашли их сочетания, доставляемые оператором подстановки, оператором примитивной рекурсии и $\mu$-оператором.

Теоремы об А. с. вскрывают весьма существенную особенность осуществленных стандартизаций общего понятия алгоритма - их «устойчивость» по отношению к естественным способам А. с. Это обстоятельство является одним из наиболее веских доводов в пользу основной гипотезы теоріи алгоритмов (Чёрча тезиса). Теоремы об А. с. составляют важный раздел общей теории алгоритмов. Будучи доказаны однажды, они позволяют в дальнейшем убеждаться в осуществимости сложных и громоздких алгоритмов без фактического выписывания определяющих их схем.

Значительный интерес для общей теории алгоритмов представляет вопрос о разыскании базиса, позволяющего при фиксированном наборе способов А. с. порождать любой алгоритм к.-л. интересующего нас класса.

Лит.: [1] М а р к о в А. А., Теория алгорифмов, «тр. Maтем. ин-та Aн ССCP», 1954, т. 42, с. $94-145$; [2] К л ин и С. К., Введение в метаматематику, пер. с англ., М., 1957; [3] у с п е н-

![](https://cdn.mathpix.com/cropped/2023_07_08_cffd143f92b9c802e1dag-1.jpg?height=44&width=814&top_left_y=1618&top_left_x=1007)
М., 1965.

АЛГОРИТМОВ ТЕОРИЯ - раздел математики, изучающий общие свойства алгоритмов. Содержательные явления, приведшие к образованию понятия «алгоритм», прослеживаются в математике в течение всего времени ее суцествования. Однако само это понятие сформировалось лишь в 20 в. и стало предметом самостоятельного изучения (по-видимому, впервые, хотя еще в расплывчатом виде) в 20-х гг. 20 в. в трудах представителей интуиционизма Л. Э. Я. Брауэра (L. Е. J. Brouwer) и Г. Вейля (H. Weyl, см. [1]). Началом сиотематич. разработки А. т. можно считать 1936, когда А. Чёрч (A. Church, [2]) опубликовал первое уточнение понятия вычислимой бункции (предложив отождествлять понятие всюду определенной вычислимой функции, имеющей натуральные аргументы и значения, с понятием общерекурсивной функцил) и привел первый пример функции, не являющейся вычислимой, а А. М. Тьюринг (A. M. Turing, [3], [4]) и Э. Л. Пост (Е. L. Post, [5]) дали первые уточнения понятия алгоритма (в терминах идеализированных вычислительных машин, см. Тьюринга мащина). В дальнейшем А. т. получила развитие

8 Математцческая энц., т. 1